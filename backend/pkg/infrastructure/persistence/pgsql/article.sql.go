// Code generated by sqlc. DO NOT EDIT.
// source: article.sql

package pgsql

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createArticle = `-- name: CreateArticle :one
INSERT INTO articles (id, title, url, savedOn, readOn)
VALUES ($1, $2, $3, $4, $5) RETURNING id, title, url, savedon, readon
`

type CreateArticleParams struct {
	ID      uuid.UUID    `json:"id"`
	Title   string       `json:"title"`
	URL     string       `json:"url"`
	SavedOn time.Time    `json:"savedon"`
	ReadOn  sql.NullTime `json:"readon"`
}

func (q *Queries) CreateArticle(ctx context.Context, arg CreateArticleParams) (Article, error) {
	row := q.queryRow(ctx, q.createArticleStmt, createArticle,
		arg.ID,
		arg.Title,
		arg.URL,
		arg.SavedOn,
		arg.ReadOn,
	)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.URL,
		&i.SavedOn,
		&i.ReadOn,
	)
	return i, err
}

const deleteArticle = `-- name: DeleteArticle :exec
DELETE
FROM articles
WHERE id = $1
`

func (q *Queries) DeleteArticle(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteArticleStmt, deleteArticle, id)
	return err
}

const getAllArticles = `-- name: GetAllArticles :many
SELECT id, title, url, savedon, readon
FROM articles
ORDER BY title
`

func (q *Queries) GetAllArticles(ctx context.Context) ([]Article, error) {
	rows, err := q.query(ctx, q.getAllArticlesStmt, getAllArticles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.URL,
			&i.SavedOn,
			&i.ReadOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneArticleById = `-- name: GetOneArticleById :one
SELECT id, title, url, savedon, readon
FROM articles
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOneArticleById(ctx context.Context, id uuid.UUID) (Article, error) {
	row := q.queryRow(ctx, q.getOneArticleByIdStmt, getOneArticleById, id)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.URL,
		&i.SavedOn,
		&i.ReadOn,
	)
	return i, err
}

const updateArticle = `-- name: UpdateArticle :one
UPDATE articles
SET title = $1,
    url = $2,
    savedOn = $3,
    readOn = $4
WHERE id = $1
    RETURNING id, title, url, savedon, readon
`

type UpdateArticleParams struct {
	Title   string       `json:"title"`
	URL     string       `json:"url"`
	SavedOn time.Time    `json:"savedon"`
	ReadOn  sql.NullTime `json:"readon"`
}

func (q *Queries) UpdateArticle(ctx context.Context, arg UpdateArticleParams) (Article, error) {
	row := q.queryRow(ctx, q.updateArticleStmt, updateArticle,
		arg.Title,
		arg.URL,
		arg.SavedOn,
		arg.ReadOn,
	)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.URL,
		&i.SavedOn,
		&i.ReadOn,
	)
	return i, err
}
